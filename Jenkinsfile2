pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('github-token')
        IMAGE_NAME = 'laurensdsm/etherpad'
        IMAGE_VERSION = 'latest'
    }
    stages {
        stage('Image Cleanup') {
            steps {
                sh 'docker system prune -a --volumes --force'
            }
        }

        stage('Build') {
            steps {
                sh 'docker compose build'
            }
        }

        stage('Deployment') {
            steps {
                sh 'docker compose up -d'

            }
        }
        stage('ESLint Check') {
            steps {
                script {
                    def eslintError = null // Initialize eslintError

                    try {
                        sh 'rm -rf node_modules package-lock.json && npm install'
                        sh 'npm init'
                        sh 'rm eslint.xml || true'
                        sh './node_modules/eslint/bin/eslint.js -f checkstyle src > eslint.xml'
                    } catch (Exception e) {
                        // Catch any exception and handle it gracefully
                        eslintError = "ESLint Check failed: ${e.message}"
                        echo eslintError
                        currentBuild.result = 'SUCCESS' // Set overall build result to SUCCESS
                    }

                    archiveArtifacts artifacts: 'eslint.xml', allowEmptyArchive: true
                }
            }
        }

    }
    post {
        failure {
            sh 'echo "Pipeline failed!"'
        }
        always{
            sh 'docker logout'
            publishCheckstyle(pattern: 'eslint.xml', unstableTotalAll: '10', healthyTotalAll: '5')
            recordIssues enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: 'eslint.xml')
        }
            
    }     
}
